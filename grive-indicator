#!/usr/bin/env python3
import gi
gi.require_version('Gtk', '3.0')
gi.require_version('AppIndicator3', '0.1')
from gi.repository import Gtk
from gi.repository import Gio
from gi.repository import AppIndicator3
from gi.repository import GLib
from pathlib import Path
from datetime import datetime
import os
import subprocess
import sys
import json
import re

GRIVEI_PATH = os.path.abspath(os.path.join(str(Path(__file__).parents[0]), "data"))

class GriveIndicator:
    def __init__(self):
        try:
            with open("{}/.grive-indicator".format(os.environ['HOME']), 'r') as json_data:
                data = json.load(json_data)
                if data["style"] == None or data["time"] == None:
                    raise FileNotFoundError
        except:
            data = {"style": "dark", "time": 5, "folder": "{}/Documents/Grive".format(os.environ['HOME'])}
            with open("{}/.grive-indicator".format(os.environ['HOME']), 'w+') as json_data:
                json.dump(data, json_data)
        self.ind = AppIndicator3.Indicator.new("Grive Indicator", os.path.join(GRIVEI_PATH, self.getIcon()),
                                              AppIndicator3.IndicatorCategory.APPLICATION_STATUS)
        self.ind.set_status(AppIndicator3.IndicatorStatus.ACTIVE)
        self.ind.set_attention_icon("indicator-messages-new")
        self.menu_setup()
        self.ind.set_menu(self.menu)

        self.syncNow(None)
        self.infoGrive()

    def menu_setup(self):
        self.menu = Gtk.Menu()

        self.infoGrive_item = Gtk.MenuItem("Starting Grive")
        self.infoGrive_item.set_sensitive(False)
        self.infoGrive_item.show()

        self.lastSync_item = Gtk.MenuItem('Not Available')
        self.lastSync_item.set_sensitive(False)
        self.lastSync_item.show()

        self.setInterval_item = Gtk.MenuItem("Change sync interval")
        self.setInterval_item.connect("activate", self.setInterval)
        self.setInterval_item.show()

        self.syncNow_item = Gtk.MenuItem("Sync now")
        self.syncNow_item.connect("activate", self.syncNow)
        self.syncNow_item.show()

        self.seperator1_item = Gtk.SeparatorMenuItem()
        self.seperator1_item.show()

        self.Remote_item = Gtk.MenuItem("Open remote GDrive")
        self.Remote_item.connect("activate", self.openRemote)
        self.Remote_item.show()

        self.Local_item = Gtk.MenuItem("Open local GDrive")
        self.Local_item.connect("activate", self.openLocal)
        self.Local_item.show()

        self.seperator2_item = Gtk.SeparatorMenuItem()
        self.seperator2_item.show()

        self.DarkTheme_item = Gtk.MenuItem("Use dark theme icon")
        self.DarkTheme_item.connect("activate", self.setDarkTheme)
        self.DarkTheme_item.show()

        self.LightTheme_item = Gtk.MenuItem("Use light theme icon")
        self.LightTheme_item.connect("activate", self.setLightTheme)
        self.LightTheme_item.show()

        self.seperator3_item = Gtk.SeparatorMenuItem()
        self.seperator3_item.show()

        self.Quit_item = Gtk.MenuItem("Quit")
        self.Quit_item.connect("activate", self.Quit)
        self.Quit_item.show()

        self.menu.append(self.infoGrive_item)
        self.menu.append(self.lastSync_item)
        self.menu.append(self.setInterval_item)
        self.menu.append(self.syncNow_item)
        self.menu.append(self.seperator1_item)
        self.menu.append(self.Remote_item)
        self.menu.append(self.Local_item)
        self.menu.append(self.seperator2_item)
        self.menu.append(self.DarkTheme_item)
        self.menu.append(self.LightTheme_item)
        self.menu.append(self.seperator3_item)
        self.menu.append(self.Quit_item)

    def infoGrive(self):
        time = self.getValue('time')
        self.infoGrive_item.set_label("Grive sync every {} min".format(time))
        # self.lastSync_item.set_label('Last sync at ' + self.lastSync)

    def refresh(self):
        self.syncNow(None)
        self.infoGrive()
        GLib.timeout_add(216000*int(self.getValue('time')), self.refresh)

    def syncNow(self, _):
        self.lastSync = re.split('T|\.', datetime.now().isoformat())[1]
        subprocess.run(['killall', 'grive'])
        subprocess.Popen(['grive'], cwd=self.getValue('folder'))
        self.lastSync_item.set_label('Last sync at ' + self.lastSync)

    def getValue(self, key):
        with open("{}/.grive-indicator".format(os.environ['HOME']), 'r') as json_data:
            data = json.load(json_data)
        return data[key]

    def setValue(self, key, value):
        with open("{}/.grive-indicator".format(os.environ['HOME']), 'r') as json_data:
            data = json.load(json_data)
        with open("{}/.grive-indicator".format(os.environ['HOME']), 'w') as json_data:
            data[key] = value
            json.dump(data, json_data)
        subprocess.Popen(['notify-send', '{} set to {}.'.format(key.capitalize(), value),
                          '--icon={}/drive-dark.png'.format(os.path.abspath(GRIVEI_PATH))])

    def setDarkTheme(self, _):
        self.setValue("style", "dark")
        self.ind.set_icon_full(os.path.join(GRIVEI_PATH, self.getIcon()), "grive-indicator-dark")

    def setLightTheme(self, _):
        self.setValue("style", "light")
        self.ind.set_icon_full(os.path.join(GRIVEI_PATH, self.getIcon()), "grive-indicator-light")

    def setInterval(self, _):
        out = subprocess.check_output(['zenity', '--scale', '--title="Grive sync interval"',
                                      '--min-value=1', '--max-value=180', '--value=1', '--step=1']).decode().strip()
        if out:
            self.setValue("time", out)
            self.infoGrive()

    def openRemote(self, _):
        subprocess.Popen(["xdg-open", "https://drive.google.com/"])

    def openLocal(self, _):
        subprocess.Popen(["xdg-open", self.getValue('folder')])

    def getIcon(self):
        style = self.getValue('style')
        if style == "dark":
            return "drive-dark.png"
        else:
            return "drive-light.png"

    def Quit(self, _):
        subprocess.run(['killall', 'grive-sync'])
        Gtk.main_quit()

    def main(self):
        Gtk.main()

if __name__ == "__main__":
    indicator = GriveIndicator()
    indicator.main()
